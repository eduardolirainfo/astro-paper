---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import { type CollectionEntry, getCollection } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import Hr from "@components/Hr.astro";
import ScrollToTopButton from "@components/ScrollToTopButton.astro";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const { title, author, description, ogImage, canonicalURL, pubDatetime, tags } =
  post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src || "";
const ogUrl = new URL(
  ogImageUrl ?? `/blog/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;

const posts = await getCollection("blog", ({ data }) => !data.draft);

const currentPostIndex = posts.findIndex(p => p.data.title === title);

const previousPostIndex = currentPostIndex - 1;
const nextPostIndex = currentPostIndex + 1;

const hasPreviousPost = previousPostIndex >= 0;
const hasNextPost = nextPostIndex < posts.length;

const previousPost = hasPreviousPost ? posts[previousPostIndex] : null;
const nextPost = hasNextPost ? posts[nextPostIndex] : null;

---

<Layout
  title={title}
  author={author}
  description={description}
  ogImage={ogUrl}
  canonicalURL={canonicalURL}
>
  <Header />
  <Hr />
  <div class="mx-auto flex w-full max-w-4xl justify-start px-2 pt-8">
    <button
      class="focus-outline mb-2 mt-8 flex hover:opacity-75"
      onclick="
      history.back()
      "
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        stroke="currentColor"
        fill="currentColor"
        viewBox="0 0 24 24"
        ><path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg><span>Voltar</span>
    </button>
  </div>
  <main id="main-content" transition:animate="none">
    <article
      itemscope
      itemtype="http://schema.org/Article"
      class="antialiased"
      transition:animate="none"
    >
      <header
        class="header-card dark:highlight-white/5 relative mx-auto mb-8 max-w-5xl overflow-visible rounded-xl bg-opacity-70 bg-cover bg-center bg-no-repeat shadow-lg ring-1 ring-black/5
        sm:px-4"
      >
        {
          ogImage ? (
            <div
              class="absolute inset-0 bg-cover bg-center bg-no-repeat opacity-10"
              style={`background-image: url('${ogImage}')`}
            />
          ) : (
            <div
              class="absolute inset-0 bg-cover bg-center bg-no-repeat opacity-5"
              style="background-image: url('/assets/sparkles.gif');"
            />
          )
        }

        <div class="relative z-10">
          <div
            class="grid-fake o absolute left-0 top-0 z-10 h-16 w-16 md:ml-20 md:mt-24 md:h-40 md:w-40"
          >
          </div>
          <div
            class="my-2 px-8 py-8 sm:rounded-md md:px-8 md:py-8 lg:px-8 lg:py-8"
          >
            <h1
              transition:name={slugifyStr(title)}
              itemprop="headline"
              class="sm:text-3xlmd:text-5xl mb-4 bg-gradient-to-r from-primary to-secondary bg-clip-text text-2xl font-bold text-transparent lg:text-6xl"
            >
              {title}
            </h1>
            <Datetime pubDatetime={pubDatetime} size="lg" className="my-2" />
          </div>
          <div
            class="grid-fake o absolute bottom-0 right-0 z-10 h-16 w-16 md:ml-20 md:mt-24 md:h-40 md:w-40"
          >
          </div>
        </div>
      </header>
      {tags.map(tag => <Tag tag={slugifyStr(tag)} />)}
    </article>
    <section
      itemprop="articleBody"
      class="prose mx-auto my-4 px-4 md:prose-lg lg:prose-xl"
    >
      <Content />
    </section>
  </main>

  <div class="pg-wrapper join">
    {
      hasPreviousPost && (
        <a
          href={`/blog/${slugifyStr(previousPost?.slug || "")}`}
          class={`btn btn-outline join-item flex items-center`}
        >
          <svg
            class={`mr-2 h-6 w-6 ${!hasPreviousPost ? "disabled-svg" : ""}`}
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <title>Post anterior</title>
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"
            />
          </svg>
          Post anterior
        </a>
      )
    }
    {
      hasNextPost && (
        <a
          href={`/blog/${slugifyStr(nextPost?.slug ?? "")}`}
          class={`btn btn-outline join-item flex items-center`}
        >
          Próximo post
          <svg
            class={`ml-2 h-6 w-6 ${!hasNextPost ? "disabled-svg" : ""}`}
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <title>Próximo post</title>
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5l7 7-7 7"
            />
          </svg>
        </a>
      )
    }
  </div>
</Layout>
<ScrollToTopButton />
<Footer />

<style>
  main {
    @apply mx-auto w-full max-w-4xl px-4 pb-12;
  }

  a {
    @apply text-primary;
  }

  .post-title {
    @apply text-2xl font-semibold;
  }
  .tags-container {
    @apply my-8;
  }
  .tags-container li {
    @apply inline-block;
  }
  .header-card {
    @apply bg-primary bg-opacity-70 text-current;
    background: border-box;
    word-wrap: break-word;
  }

  .pg-wrapper {
    @apply flex items-center justify-center space-x-0;
  }

  .disabled {
    @apply pointer-events-none select-none opacity-50;
  }

  .grid-fake {
    background-image: radial-gradient(rgba(0, 0, 0, 0.1) 2px, transparent 2px);
    background-size: 16px 16px;
  }

  .grid-fake {
    @apply bg-secondary bg-opacity-5;
  }
  .pagination-wrapper {
    @apply flex items-center justify-center space-x-4;
  }
  .pagination-wrapper a {
    @apply inline-block rounded-md px-3 py-1;
  }
</style>

<script>
  function attachCopyButtons() {
    let copyButtonLabel = "Copiar";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 top-3 px-2 py-1 text-xs leading-4 badge badge-primary";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      if (codeBlock.parentNode) {
        codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      }
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code.innerText;

      await navigator.clipboard.writeText(text);

      button.innerText = "Copiado";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }

  function MockupCode() {
    var astroCodeContainers = document.querySelectorAll(".astro-code");

    astroCodeContainers.forEach(function (container) {
      if (container.parentNode) {
        container.parentNode.classList.add(
          "mockup-code",
          "bg-neutral",
          "glass"
        );
      }
    });

    var astroCodeElements = document.querySelectorAll("pre.astro-code");

    astroCodeElements.forEach(function (preElement) {
      preElement.classList.add("bg-transparent");
      preElement.classList.remove("astro-code");
    });
  }

  attachCopyButtons();
  document.addEventListener("astro:after-swap", attachCopyButtons);
  MockupCode();
  document.addEventListener("astro:after-swap", MockupCode);
</script>
