---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Datetime from "@components/Datetime";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import Hr from "@components/Hr.astro"; 


export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const { title, author, description, ogImage, canonicalURL, pubDatetime, tags } =
  post.data;

const { Content } = await post.render();

const ogUrl = new URL(ogImage ? ogImage : `${title}.png`, Astro.url.origin)
  .href;
---

<Layout
  title={title}
  author={author}
  description={description}
  ogImage={ogUrl}
  canonicalURL={canonicalURL}
>
  <Header />
  <Hr />
  <div class="mx-auto flex w-full max-w-4xl justify-start px-2 pt-8">
    <button
      class="focus-outline mb-2 mt-8 flex hover:opacity-75"
      onclick="
      history.back()
      "
    >
      <svg xmlns="http://www.w3.org/2000/svg"
        ><path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg><span>Voltar</span>
    </button>
  </div>
  <main id="main-content">
    
    <article itemscope itemtype="http://schema.org/Article">
      <header
        class="header-card text-white dark:text-white mx-auto mb-8 max-w-5xl sm:px-4 overflow-visible relative  bg-gradient-to-r from-green-400 to-blue-500 shadow-lg ring-1 ring-black/5 rounded-xl  dark:bg-slate-800 dark:highlight-white/5"
      >
        <div
          class="px-4 py-16 sm:rounded-md md:px-8 md:py-24 lg:px-16 lg:py-32"
        >
          <h1
            transition:name={title}
            itemprop="headline"
            class="text-white dark:text-white lg:leading-tighter mb-4 text-2xl font-bold leading-tight sm:text-3xl sm:leading-tight md:text-5xl md:leading-tight lg:text-6xl"
          >
            {title}
          </h1>
          <p >
            <Datetime datetime={pubDatetime} size="lg" className="my-2"/>
          </p>
        </div>
      </header>
      <section
        itemprop="articleBody"
        class="prose-a:text-sky-600 dark:prose-a:text-sky-300 prose mx-auto my-4 px-4 dark:prose-invert md:prose-lg lg:prose-xl"
      >
        <Content />
      </section>
    </article>
    <ul class="tags-container">
      {tags.map(tag => <Tag name={slugifyStr(tag)} />)}
    </ul>
  </main>
  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto w-full max-w-4xl px-4 pb-12;
  }
  .post-title {
    @apply text-2xl font-semibold text-skin-accent;
  }
  .tags-container {
    @apply my-8;
  }
  .tags-container li {
    @apply inline-block;
  }
  .header-card {
    word-wrap: break-word;
  }

  /*   
.glass {
  position: relative;
  box-sizing: border-box;
  padding: 0; 
  border: 2px solid rgba(0, 0, 0, 0.15);
  border-radius: 25px 25px 0 25px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.25), inset 0 0 2px 0px white;
  background: rgba(0, 0, 0, 0.0125);
  overflow: hidden;
  transition: all 200ms ease-in-out;
  -webkit-animation: resize 1.5s 0.5s;
          animation: resize 1.5s 0.5s;
}
.glass::after {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  -webkit-backdrop-filter: blur(3px);
          backdrop-filter: blur(3px);
  background-color: rgba(255, 255, 255, 0.025);
  z-index: -1;
}
.glass::before {
  content: "";
  display: block;
  position: absolute;
  bottom: -10px;
  right: -10px;
  border: 10px solid transparent;
  border-bottom: 10px solid rgba(0,0,0,0.3);
  transform: rotate(135deg);
} */
</style>

<script>
  let copyButtonLabel = "Copiar";
  let codeBlocks = Array.from(document.querySelectorAll("pre"));

  for (let codeBlock of codeBlocks) {
    let wrapper = document.createElement("div");
    wrapper.style.position = "relative";

    let copyButton = document.createElement("button");
    copyButton.className = "copy-code";
    copyButton.innerHTML = copyButtonLabel;

    codeBlock.setAttribute("tabindex", "0");
    codeBlock.appendChild(copyButton);
    // wrap codebock with relative parent element
    codeBlock.parentNode.insertBefore(wrapper, codeBlock);
    wrapper.appendChild(codeBlock);

    copyButton.addEventListener("click", async () => {
      await copyCode(codeBlock, copyButton);
    });
  }

  async function copyCode(block, button) {
    let code = block.querySelector("code");
    let text = code.innerText;

    await navigator.clipboard.writeText(text);

    // visual feedback that task is completed
    button.innerText = "Copiado!";

    setTimeout(() => {
      button.innerText = copyButtonLabel;
    }, 700);
  }
</script>